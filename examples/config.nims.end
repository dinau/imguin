# Set compiler options
case TC
  of "vcc" , "clang_cl":
    switch "define","lto"
  else:
    if "" == findExe(TC): # GCC is default compiler if TC dosn't exist on the PATH
      echo "#### Set to cc = ",TC
      TC = "gcc"
    if "" == findExe(TC): # if gcc dosn't exist, try clang
      TC = "clang"
      echo "#### Set to cc = ",TC

# Reduce code size further
when false:
  #switch "mm","arc" # nim-1.6.8 or later
  switch "gc", "arc"
  switch "define", "useMalloc"
  switch "define", "noSignalHandler"
  #switch "panics","on"

#switch "verbosity","1"

proc commonOpt() = # for gcc and clang
#  switch "passL", "-s" # remov debug info from elf file
  switch "passC", "-ffunction-sections"
  switch "passC", "-fdata-sections"
  switch "passL", "-Wl,--gc-sections"

#const NIMCACHE = ".nimcache_" & TC
switch "nimcache", ".nimcache"

case TC
  of "gcc":
    commonOpt()
    switch "cc",TC
  of "clang":
    switch "cc.exe","clang"
    switch "cc.linkerexe","clang"
    switch "cc",TC
  of "zigcc":
    # First do: nimble install zigcc
    switch "cc","clang"
    var ext = ""
    when defined(windows):
      ext = ".cmd"
      switch "passL","-Wl,--subsystem,windows"
    switch "clang.exe","zigcc" & ext
    switch "clang.linkerexe","zigcpp" & ext
    switch "passL","-lgcc_s"
  of "vcc":
    switch "cc",TC
    switch "passL","/Zc:strictStrings-" # Eliminates C2440 error at C++. Notice: TODO
    switch "passC","/MP"

when LTO: # These options let link time slow while reducing code size.
  switch "define", "lto"

echo ""
echo "#### [ ", TC, " ] Compiler ####"
echo ""
